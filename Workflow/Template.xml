<?xml version="1.0" encoding="utf-8" ?>
<Workflow>
  <UserSettings GroupTable="template.group" GroupGroupTable="template.group_group" UserGroupTable="template.user_group" Table="template.user" PermissionTable="template.permission" GroupPermissionTable="template.group_permission" />

  <SqlQueries>
    <SqlQuery Name="CitySelectSqlQuery">
      <Text>
		SELECT
		  city.city_id AS "CityId",
		  city.title AS "Title",
		  city.archive AS "Archive"
		FROM
		  template.city
		ORDER BY city.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CityShortSelectSqlQuery">
      <Text>
		SELECT
		  city.city_id AS "CityId",
		  city.title AS "Title"
		FROM
		  template.city
		WHERE
		  NOT city.archive OR
		  city.city_id = {CityId}
		ORDER BY city.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CitySimpleSelectSqlQuery">
      <Text>
	    SELECT
	      city.city_id AS "CityId",
	      city.title AS "Title"
	    FROM
	      template.city;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CityInsertSqlQuery">
      <Text>
		INSERT INTO template.city (
		  title,
		  archive
		)
		VALUES (
		  {Title},
		  {Archive}
		);
      </Text>
    </SqlQuery>

    <SqlQuery Name="CityUpdateSqlQuery">
      <Text>
		UPDATE template.city
		SET
		  title = {Title},
		  archive = {Archive}
		WHERE
		  city_id = {CityId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="CityDeleteSqlQuery">
      <Text>
		SELECT template.city_try_delete({CityId}::smallint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientSelectSqlQuery">
      <Text>
	    SELECT
	      client.client_id AS "ClientId",
	      client.title AS "Name",
	      city.title AS "CityTitle",
	      client.phone AS "Phone",
	      client.archive AS "Archive",
	      COUNT(*) OVER() AS "Count"
	    FROM
	      template.client
	      LEFT JOIN template.city USING(city_id)
	    WHERE
	      ({Archive} ISNULL OR client.archive = {Archive}) AND
	      ({SearchKeywords} ISNULL OR client.title ilike '%' || {SearchKeywords} ||'%')
	    ORDER BY client.title
	    LIMIT {Limit}
	    OFFSET GREATEST(({Page} - 1) * {Limit}, 0);
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientShortSelectSqlQuery">
      <Text>
	    SELECT
	      client.client_id AS "ClientId",
	      client.title AS "ClientTitle",
	      city.title AS "CityTitle",
	      client.phone AS "Phone",
	      client.email AS "Email"
	    FROM
	      template.client
	      LEFT JOIN template.city USING(city_id)
        WHERE
	      NOT client.archive OR
	      client.client_id = {ClientId}
        ORDER BY client.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientSimpleSelectSqlQuery">
      <Text>
	    SELECT
	      client.client_id AS "ClientId",
	      client.title AS "Title"
	    FROM
	      template.client;
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientByIdSelectSqlQuery">
      <Text>
	    SELECT
	      client.title AS "Name",
	      client.city_id AS "CityId",
	      client.date_of_birth AS "DateOfBirth",
	      client.email AS "Email",
	      client.phone AS "Phone",
	      F.guid AS "PhotoGuid",
	      'guid://' || F.guid AS "PhotoGuidPath"
	    FROM
	      template.client
	      LEFT JOIN public.file F ON client.photo_file_id = F.file_id
	    WHERE
	      client.client_id = {ClientId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientInsertSqlQuery">
      <Text>
	    INSERT INTO template.client(
	      city_id,
	      date_of_birth,
	      title,
	      email,
	      phone,
	      photo_file_id
	    )
	    VALUES (
	      {CityId},
	      {DateOfBirth},
	      {Name},
	      {Email},
	      {Phone},
	      (SELECT F.file_id FROM public.file F WHERE F.guid = {PhotoGuid})
	    )
	    RETURNING client_id;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="ClientUpdateSqlQuery">
      <Text>
	    UPDATE template.client
	    SET
	      city_id = {CityId},
	      date_of_birth = {DateOfBirth},
	      title = {Name},
	      email = {Email},
	      phone = {Phone},
	      photo_file_id = (SELECT F.file_id FROM public.file F WHERE F.guid = {PhotoGuid})
	    WHERE
	      client_id = {ClientId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="ClientDeleteSqlQuery">
      <Text>
	    SELECT template.client_try_delete({ClientId}::bigint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="ClientArchiveSqlQuery">
      <Text>
	    UPDATE template.client
	    SET
	      archive = {Archive}
	    WHERE
	      client_id = {ClientId};
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Заказы===-->
    <!--============================================================-->
    <SqlQuery Name="OrderSelectSqlQuery">
      <Text>  
	    WITH _filter AS (
	      SELECT
	        CASE
	          WHEN {Filter} = 'Today'
	          THEN CURRENT_DATE::timestamp
	          WHEN {Filter} = 'CurrentWeek'
	          THEN date_trunc('week', CURRENT_DATE::timestamp)
	          WHEN {Filter} = 'Fortnight'
	          THEN date_trunc('week', CURRENT_DATE::timestamp) - interval '7d'
	          WHEN {Filter} = 'Period'
	          THEN {StartDate}::timestamp
	        END AS start_date,
	    
	        CASE
	          WHEN {Filter} = 'Today'
	          THEN CURRENT_DATE + interval '1d - 1s'
	          WHEN {Filter} = 'CurrentWeek'
	          THEN date_trunc('week', CURRENT_DATE::timestamp) + interval '7d - 1s'
	          WHEN {Filter} = 'Fortnight'
	          THEN date_trunc('week', CURRENT_DATE::timestamp) + interval '7d - 1s'
	          WHEN {Filter} = 'Period'
	          THEN {EndDate}::timestamp + interval '1d - 1s'
	        END AS end_date
	    ), _order AS (
		  SELECT
		    O.order_id,
		    O.client_id,
		    C.city_id,
		    O.order_number,
		    O.order_date
		  FROM
		    template.order O
		    LEFT JOIN template.client C USING(client_id)
		    LEFT JOIN _filter ON true
		  WHERE
            O.added AND
		    NOT O.deleted AND
		    O.order_date BETWEEN convert_date_filter(_filter.start_date)
		                         AND convert_date_filter(_filter.end_date)
		), _order_position AS (
		  SELECT
		    O.order_id,
		    SUM(OP.quantity * OP.unit_price) AS total_cost
		  FROM
		    _order O
		    JOIN template.order_position OP USING(order_id)
		    LEFT JOIN template.material M USING(material_id)
		  GROUP BY O.order_id
		), _payment AS (
		  SELECT
		    O.order_id,
		    SUM(C.summ) AS total_payment_summ
		  FROM
		    _order O
		    JOIN template.order_payment OP USING(order_id)
		    JOIN template.cash C USING(cash_id)
		  WHERE NOT C.deleted
		  GROUP BY O.order_id
		)
		
		SELECT
		  O.order_id AS "OrderId",
		  O.client_id AS "ClientId",
		  O.city_id AS "CityId",
		  O.order_number AS "OrderNumber",
		  O.order_date AS "OrderDate",
		  COALESCE(OP.total_cost, 0) AS "TotalOrderCost",
		  COALESCE(P.total_payment_summ, 0) AS "TotalPaymentSumm",
		  COALESCE(OP.total_cost, 0) - COALESCE(P.total_payment_summ, 0) AS "TotalDebt",
		  COUNT(*) OVER() AS "Count"
		FROM
		  _order O
		  LEFT JOIN _order_position OP USING(order_id)
		  LEFT JOIN _payment P USING(order_id)
		ORDER BY O.order_number ASC
        LIMIT {Limit}
        OFFSET GREATEST(({Page} - 1) * {Limit}, 0);
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderByIdSelectSqlQuery">
      <Text>
        SELECT
		  O.order_id AS "OrderId",
		  O.client_id AS "ClientId",
		  O.order_number AS "OrderNumber",
		  O.order_date AS "OrderDate",
		  O.description AS "Description"
        FROM
          template.order O
        WHERE
          O.order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="EmptyOrderInsertSqlQuery">
      <Text>
	    INSERT INTO template.order (added)
	    VALUES (false)
	    RETURNING order_id;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="EmptyOrderDeleteSqlQuery">
      <Text>
		DELETE FROM template.order_position OP
		  USING template.order O
		WHERE
		  OP.order_id = O.order_id AND
		  NOT O.added AND
		  OP.order_id = {OrderId};
		
		DELETE FROM template.order
		WHERE
		  NOT added AND
		  order_id = {OrderId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderUpdateSqlQuery">
      <Text>
		UPDATE template.order
		SET
		  order_number = {OrderNumber},
		  order_date = {OrderDate},
		  client_id = {ClientId},
		  description = {Description},
		  added = true
		WHERE
		  order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderDeleteSqlQuery">
      <Text>
		UPDATE template.order
		SET
		  deleted = true,
		  date_deleted = now()
		WHERE
		  order_id = {OrderId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="DeletedOrderSelectSqlQuery">
      <Text>
		SELECT
		  O.order_id AS "OrderId",
		  O.client_id AS "ClientId",
		  C.city_id AS "CityId",
		  O.order_number AS "OrderNumber",
		  O.order_date AS "OrderDate",
		  O.date_deleted AS "DateDeleted"
		FROM
		  template.order O
		  LEFT JOIN template.client C USING(client_id)
		WHERE
		  O.deleted AND
		  O.date_deleted BETWEEN convert_date_filter({StartDate}::timestamp)
		                     AND convert_date_filter({EndDate}::timestamp + interval '1d - 1s')
		ORDER BY O.order_number ASC;
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Единицы измерения===-->
    <!--============================================================-->
    <SqlQuery Name="UnitSelectSqlQuery">
      <Text>  
		SELECT
		  unit.unit_id AS "UnitId",
		  unit.title AS "Title",
		  short_title AS "ShortTitle",
		  unit.archive AS "Archive"
		FROM
		  template.unit
		ORDER BY unit.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="UnitByIdSelectSqlQuery">
      <Text>
        SELECT
          unit.unit_id AS "UnitId",
          unit.title AS "Title",
          short_title AS "ShortTitle"
        FROM
          template.unit
        WHERE
          unit.unit_id = {UnitId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UnitInsertSqlQuery">
      <Text>
    	INSERT INTO template.unit (
    	  title,
          short_title
    	)
    	VALUES (
    	  {Title},
    	  {ShortTitle}
    	)
    	RETURNING unit_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="UnitUpdateSqlQuery">
      <Text>
        UPDATE template.unit
        SET
          title = {Title},
          short_title = {ShortTitle}
        WHERE
          unit_id = {UnitId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UnitArchiveUpdateSqlQuery">
      <Text>
        UPDATE template.unit
        SET
          archive = NOT archive
        WHERE
          unit_id = {UnitId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UnitDeleteSqlQuery">
      <Text>
        SELECT template.unit_try_delete({UnitId}::smallint);
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Товарно-материальные ценности===-->
    <!--============================================================-->
    <SqlQuery Name="MaterialSelectSqlQuery">
      <Text>  
        SELECT
          M.material_id AS "MaterialId",
          M.material_category_id AS "MaterialCategoryId",
          M.title AS "Title",
          M.unit_id AS "UnitId",
          M.unit_price AS "UnitPrice",
          M.archive AS "Archive"
        FROM
          template.material M
        ORDER BY M.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialSimpleSelectSqlQuery">
      <Text>
	    SELECT
	      M.material_id AS "MaterialId",
	      M.title AS "Title",
	      MC.title AS "MaterialCategoryTitle",
	      U.short_title AS "UnitShortTitle"
	    FROM
	      template.material M
	      LEFT JOIN template.material_category MC USING(material_category_id)
	      LEFT JOIN template.unit U USING(unit_id)
	    ORDER BY M.title;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialByIdSelectSqlQuery">
      <Text>
		SELECT
		  M.material_category_id AS "MaterialCategoryId",
		  M.title AS "Title",
		  M.unit_id AS "UnitId",
		  M.unit_price AS "UnitPrice"
		FROM
		  template.material M
		WHERE
		  M.material_id = {MaterialId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialInsertSqlQuery">
      <Text>
		INSERT INTO template.material (
		  title,
		  material_category_id,
		  unit_id,
		  unit_price
		)
		VALUES (
		  {Title},
		  {MaterialCategoryId},
		  {UnitId},
		  {UnitPrice}
		)
		RETURNING material_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialUpdateSqlQuery">
      <Text>
		UPDATE template.material
		SET
		  title = {Title},
		  material_category_id = {MaterialCategoryId},
		  unit_id = {UnitId},
		  unit_price = {UnitPrice}
		WHERE
		  material_id = {MaterialId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialDeleteSqlQuery">
      <Text>
        SELECT template.material_try_delete({MaterialId}::bigint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialArchiveSqlQuery">
      <Text>
        UPDATE template.material
        SET archive = {Archive}
        WHERE material_id = {MaterialId};

        UPDATE template.material_category MC
        SET archive = False
        FROM template.material M
        WHERE
          MC.material_category_id = M.material_category_id AND
          material_id = {MaterialId} AND
          NOT M.archive;

        SELECT template.material_category_unarchive_parent(M.material_category_id)
        FROM template.material M
        WHERE
          M.material_id = {MaterialId} AND
          NOT M.archive;
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Категории ТМЦ===-->
    <!--============================================================-->
    <SqlQuery Name="MaterialCategoryListSelectSqlQuery">
      <Text>
		SELECT
		  MC.material_category_id AS "MaterialCategoryId",
		  MC.title || CASE WHEN archive THEN ' (арх.)' ELSE '' END AS "Title",
		  MC.title AS "OriginalTitle",
		  MC.archive AS "Archive",
		  MC2.material_category_id NOTNULL AS "ArchiveForFilter"
		FROM
		  template.material_category MC
		  LEFT JOIN
		  (
		    WITH RECURSIVE archive_tree (material_category_id, parent_material_category_id) AS(
		      SELECT
		        material_category_id,
		        parent_material_category_id
		      FROM
		        template.material_category MC
		      WHERE
		        MC.archive AND NOT EXISTS (SELECT * FROM template.material_category MC2 WHERE MC2.parent_material_category_id = MC.material_category_id) OR
		        EXISTS (SELECT * FROM template.material M WHERE M.archive AND M.material_category_id = MC.material_category_id)
		
		      UNION
		
		      SELECT
		        MC.material_category_id,
		        MC.parent_material_category_id
		      FROM
		        template.material_category MC
		        JOIN archive_tree T ON (T.parent_material_category_id = MC.material_category_id)
		    )
		    SELECT DISTINCT material_category_id FROM archive_tree
		  ) MC2 ON (MC2.material_category_id = MC.material_category_id)
		ORDER BY MC.title, MC.material_category_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryRelationSelectSqlQuery">
      <Text>
	    SELECT
	      material_category_id AS "MaterialCategoryId",
	      parent_material_category_id AS "ParentMaterialCategoryId"
	    FROM
	      template.material_category;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryByIdSelectSqlQuery">
      <Text>
        SELECT
          MC.title AS "Title",
          MC.parent_material_category_id AS "ParentMaterialCategoryId"
        FROM
          template.material_category MC
        WHERE
          MC.material_category_id = {MaterialCategoryId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="ParentMaterialCategorySelectSqlQuery">
      <Text>
		WITH RECURSIVE tree_tmp (material_category_id, parent_material_category_id, title, path) AS (
		  SELECT material_category_id, parent_material_category_id, title, ARRAY[material_category_id]::bigint[]
		  FROM parent_mc
		
		  UNION ALL
		
		  SELECT MC.material_category_id, MC.parent_material_category_id, MC.title, T.path || ARRAY[MC.material_category_id]::bigint[]
		  FROM
		    mc_tmp MC
		  JOIN tree_tmp T ON T.material_category_id = MC.parent_material_category_id
		), mc_tmp AS (
		  SELECT *
		  FROM template.material_category
		  WHERE material_category_id IS DISTINCT FROM {MaterialCategoryId} OR {WithChild}
		), parent_mc AS (
		  SELECT *
		  FROM mc_tmp
		  WHERE parent_material_category_id IS NULL
		)
		
		SELECT
		  T.material_category_id AS "MaterialCategoryId",
		  CASE WHEN array_length(T.path, 1) > 1 THEN COALESCE(repeat('—', (array_length(T.path, 1) - 1)), '') || ' ' ELSE '' END || T.title  AS "Title"
		FROM
		  tree_tmp T
		  ORDER BY T.path, T.material_category_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryInsertSqlQuery">
      <Text>
		INSERT INTO template.material_category (
		  title,
		  parent_material_category_id
		)
		VALUES (
		  {Title},
		  {ParentMaterialCategoryId}
		)
		RETURNING material_category_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryUpdateSqlQuery">
      <Text>
		UPDATE template.material_category
		SET
		  title = {Title},
		  parent_material_category_id = {ParentMaterialCategoryId}
		WHERE
		  material_category_id = {MaterialCategoryId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryDeleteSqlQuery">
      <Text>
        SELECT template.material_category_try_delete({MaterialCategoryId}::bigint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryDeleteCascadeSqlQuery">
      <Text>
        SELECT template.material_category_delete_cascade({MaterialCategoryId}::bigint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialCategoryArchiveSqlQuery">
      <Text>
        UPDATE template.material_category
        SET archive = {Archive}
        WHERE material_category_id = {MaterialCategoryId};

        SELECT template.material_category_archive_child({MaterialCategoryId})
        WHERE {Archive};
        
        SELECT template.material_category_unarchive_parent({MaterialCategoryId})
        WHERE NOT {Archive};
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Позиции заказа===-->
    <!--============================================================-->
    <SqlQuery Name="OrderPositionByOrderIdSelectSqlQuery">
      <Text>
	    SELECT
	      OP.order_position_id AS "OrderPositionId",
	      OP.material_id AS "MaterialId",
	      OP.quantity AS "Quantity",
	      OP.unit_price AS "UnitPrice"
	    FROM
	      template.order_position OP
	    WHERE
	      OP.order_id = {OrderId}
	    ORDER BY OP.order_position_id;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPositionByIdSelectSqlQuery">
      <Text>
	    SELECT
	      OP.material_id AS "MaterialId",
	      OP.quantity AS "Quantity",
	      OP.unit_price AS "UnitPrice"
	    FROM
	      template.order_position OP
	    WHERE
	      OP.order_position_id = {OrderPositionId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPositionInsertSqlQuery">
      <Text>
    	INSERT INTO template.order_position (
    	  material_id,
		  quantity,
		  unit_price,
		  order_id
    	)
    	VALUES (
    	  {MaterialId},
		  {Quantity},
		  {UnitPrice},
		  {OrderId}
    	)
    	RETURNING order_position_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPositionUpdateSqlQuery">
      <Text>
        UPDATE template.order_position
        SET
          material_id = {MaterialId},
	      quantity = {Quantity},
	      unit_price = {UnitPrice}
        WHERE
          order_position_id = {OrderPositionId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPositionDeleteSqlQuery">
      <Text>
        DELETE FROM template.order_position
        WHERE
          order_position_id = {OrderPositionId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="MaterialShortSelectSqlQuery">
      <Text>
	    SELECT
	      M.material_id AS "MaterialId",
	      M.title AS "Title",
	      M.material_category_id AS "MaterialCategoryId",
	      MC.title AS "MaterialCategoryTitle",
	      U.short_title AS "UnitShortTitle",
	      M.unit_price AS "UnitPrice"
	    FROM
	      template.material M
	      LEFT JOIN template.material_category MC USING(material_category_id)
	      LEFT JOIN template.unit U USING(unit_id)
	    WHERE
	      NOT M.archive OR M.material_id = {MaterialId}
	    ORDER BY M.title;
	  </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Оплаты===-->
    <!--============================================================-->
    <SqlQuery Name="OrderPaymentByOrderIdSelectSqlQuery">
      <Text>  
      SELECT
        OP.order_payment_id AS "OrderPaymentId",
        C.cash_id AS "CashId",
        C.cash_date AS "Date",
        C.account_id AS "AccountId",
        C.summ AS "Summ"
      FROM
        template.order_payment OP
        JOIN template.cash C USING(cash_id)
      WHERE
        NOT C.deleted AND
        OP.order_id = {OrderId}
      ORDER BY C.cash_date, OP.order_payment_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPaymentByIdSelectSqlQuery">
      <Text>
	    SELECT
	      C.cash_date AS "Date",
	      C.account_id AS "AccountId",
	      C.summ AS "Summ"
	    FROM
	      template.order_payment OP
	      JOIN template.cash C USING(cash_id)
	    WHERE
	      OP.order_payment_id = {OrderPaymentId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPaymentInsertSqlQuery">
      <Text>
	    INSERT INTO template.cash(
	      cash_date,
	      account_id,
	      operation_id,
	      summ
	    )
	    SELECT
	      {Date},
	      {AccountId},
	      O.operation_id,
	      {Summ}
	    FROM
	      template.operation O
	    WHERE
	      id_title = 'OrderPaymentOperation';
	
	    INSERT INTO template.order_payment(
	      order_id,
	      cash_id
	    )
	    SELECT
	      {OrderId},
	      currval('template.cash_id_seq'::regclass)
	    RETURNING order_payment_id;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPaymentUpdateSqlQuery">
      <Text>
		UPDATE template.cash
		SET
		  cash_date = {Date},
		  account_id = {AccountId},
		  summ = {Summ}
		FROM
		  template.order_payment OP
		WHERE
		  cash.cash_id = OP.cash_id AND
		  OP.order_payment_id = {OrderPaymentId};
	  </Text>
    </SqlQuery>

    <SqlQuery Name="OrderPaymentDeleteSqlQuery">
      <Text>
      UPDATE template.cash
      SET
        deleted = TRUE,
        date_deleted = NOW()
      FROM
        template.order_payment OP
      WHERE
        cash.cash_id = OP.cash_id AND
        OP.order_payment_id = {OrderPaymentId};
    </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Касса===-->
    <!--============================================================-->
    <SqlQuery Name="CashSelectSqlQuery">
      <Text>  
	    SELECT
	      C.cash_id AS "CashId",
	      O.order_id AS "OrderId",
	      C.cash_date AS "Date",
	      A.title AS "AccountTitle",
	      Oper.title AS "OperationTitle",
	      CASE WHEN Oper.income THEN C.summ END AS "Income",
	      CASE WHEN NOT Oper.income THEN C.summ END AS "Expense",
	      Cl.title AS "ClientTitle"
	    FROM
	      template.cash C
	      JOIN template.account A USING(account_id)
	      JOIN template.operation Oper USING(operation_id)
	      LEFT JOIN template.order_payment OP USING(cash_id)
	      LEFT JOIN template.order O USING(order_id)
	      LEFT JOIN template.client Cl USING(client_id)
	    WHERE
	      NOT C.deleted AND
	      NOT COALESCE(O.deleted, false) AND
	      C.cash_date BETWEEN {DateStart}::timestamp AND {DateFinish}::timestamp + interval '1d - 1s'
	    ORDER BY C.cash_date, C.cash_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashByIdSelectSqlQuery">
      <Text>
	    SELECT
	      cash_date AS "Date",
	      account_id AS "AccountId",
	      operation_id AS "OperationId",
	      summ AS "Summ"
	    FROM
	      template.cash
	    WHERE
	      cash.cash_id = {CashId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashInsertSqlQuery">
      <Text>
	    INSERT INTO template.cash(
	      cash_date,
	      account_id,
	      operation_id,
	      summ
	    )
	    VALUES (
	      {Date},
	      {AccountId},
	      {OperationId},
	      {Summ}
	    )
	    RETURNING cash_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashUpdateSqlQuery">
      <Text>
	    UPDATE template.cash
	    SET
	      cash_date = {Date},
	      account_id = {AccountId},
	      operation_id = {OperationId},
	      summ = {Summ}
	    WHERE
	      cash_id = {CashId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="CashDeleteSqlQuery">
      <Text>
		DELETE FROM template.cash
		WHERE
		  cash_id = {CashId};
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--============================ОТЧЕТЫ==========================-->
    <!--============================================================-->
    <SqlQuery Name="BudgetReportSelectSqlQuery">
      <Text>
        WITH RECURSIVE _operation_tree (operation_id, operation_category_id, title, income, archive, path, child_array) AS (
          SELECT -2::integer, NULL::bigint, 'ДОХОД', True, False, ARRAY[-2]::integer[], template.operation_get_child(null, true)

          UNION

          SELECT -1::integer, NULL::bigint, 'РАСХОД', False, False, ARRAY[-1]::integer[], template.operation_get_child(null, false)

          UNION

          SELECT
            O.operation_id,
            T.operation_id,
            O.title,
            O.income,
            O.archive,
            T.path || O.operation_id,
            template.operation_get_child(O.operation_id)
          FROM
            template.operation O, _operation_tree T
          WHERE
            COALESCE(O.operation_category_id, CASE WHEN O.income THEN -2 ELSE -1 END) = T.operation_id
        ), _cash AS (
          SELECT
            Oper.operation_id,
            Oper.income,
            SUM(summ) AS summ
          FROM
            template.cash C
            JOIN template.operation Oper USING(operation_id)
            LEFT JOIN template.order_payment OP USING(cash_id)
            LEFT JOIN template.order O USING(order_id)
          WHERE
            NOT C.deleted AND
            NOT COALESCE(O.deleted, false) AND
            C.cash_date BETWEEN {DateStart}::timestamp AND {DateFinish}::timestamp + interval '1d - 1s'
          GROUP BY Oper.operation_id
        ), report_tmp AS (
          SELECT
            O.operation_id,
            O.operation_category_id,
            O.title AS operation_title,
            O.income,
            O.archive,
            O.path,
            COALESCE(C.summ, 0) summ
          FROM
            _operation_tree O
            LEFT JOIN LATERAL
            (
              SELECT SUM(summ) AS summ
              FROM _cash C
              WHERE C.operation_id = ANY(O.child_array)
            ) AS C ON True
        )
        SELECT
          true AS "Expand",
          operation_id AS "OperationId",
          operation_category_id AS "OperationCategoryId",
          operation_title AS "OperationTitle",
          summ AS "Summ",
          operation_id IN (-1, -2) AS "Total",
          income AS "Income",
          false AS "Profit"
        FROM report_tmp
        WHERE
          NOT archive OR
          summ != 0

        UNION ALL

        SELECT
          true AS "Expand",
          -3 AS "OperationId",
          NULL AS "OperationCategoryId",
          'Прибыль' AS "OperationTitle",
          SUM(summ * CASE WHEN income THEN 1 ELSE -1 END) AS "Summ",
          false AS "Total",
          NULL AS "Income",
          true AS "Profit"
        FROM report_tmp
        WHERE operation_id IN (-1, -2);
      </Text>
    </SqlQuery>

    <SqlQuery Name="BudgetReportDetailSelectSqlQuery">
      <Text>
	    WITH operation_tmp AS (
	      SELECT template.operation_get_child({OperationId}, {Income}) AS operation_id_array
	    )
	    SELECT
	      C.cash_id AS "CashId",
	      O.order_id AS "OrderId",
	      C.cash_date AS "Date",
	      A.title AS "AccountTitle",
	      Oper.title AS "OperationTitle",
	      C.summ * (CASE WHEN NOT Oper.income AND {OperationId} IS NULL AND {Income} IS NULL THEN -1 ELSE 1 END)AS "Summ",
	      Cl.title AS "ClientTitle"
	    FROM
	      operation_tmp, template.cash C
	      JOIN template.account A USING(account_id)
	      JOIN template.operation Oper USING(operation_id)
	      LEFT JOIN template.order_payment OP USING(cash_id)
	      LEFT JOIN template.order O USING(order_id)
	      LEFT JOIN template.client Cl USING(client_id)
	    WHERE
	      NOT C.deleted AND
	      NOT COALESCE(O.deleted, false) AND
	      C.cash_date BETWEEN {DateStart}::timestamp AND {DateFinish}::timestamp + interval '1d - 1s' AND
	      C.operation_id = ANY(operation_id_array)
	    ORDER BY C.cash_date, C.cash_id;
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Настройки===-->
    <!--============================================================-->
    <SqlQuery Name="SettingsSelectSqlQuery">
      <Text>
	    SELECT
	      smtp_server AS "SmtpServerAddress",
	      smtp_port AS "SmtpServerPort",
	      ssl AS "SSL",
	      email_address AS "Email",
	      email_password AS "EmailPassword",
	      (
            smtp_server NOTNULL AND
            smtp_port NOTNULL AND
            ssl NOTNULL AND
            email_address NOTNULL AND
            email_password NOTNULL
          ) AS "SmtpSettingsAreCorrect"
	    FROM template.settings
	    LIMIT 1;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="SettingsUpdateSqlQuery">
      <Text>
	    UPDATE template.settings
	    SET
	      smtp_server = {SmtpServerAddress},
	      smtp_port = {SmtpServerPort},
	      ssl = {SSL},
	      email_address = {Email},
	      email_password = {EmailPassword};
          
		UPDATE load_mode
		SET
          selected = (load_mode_id = {LoadModeId});
	  </Text>
    </SqlQuery>

    <SqlQuery Name="LoadModeSelectSqlQuery">
      <Text>
	    SELECT
	      load_mode_id AS "LoadModeId",
	      string_value(title, {PublicUserId}) AS "Title",
	      string_value(description, {PublicUserId}) AS "Description",
	      selected AS "Selected"
	    FROM public.load_mode;
	  </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Счета===-->
    <!--============================================================-->
    <SqlQuery Name="AccountSelectSqlQuery">
      <Text>  
        SELECT
          account.account_id AS "AccountId",
          account.title AS "Title",
          account.cash AS "AccountType",
          account.archive AS "Archive"
        FROM
          template.account
        ORDER BY account.title;
      </Text>
    </SqlQuery>

    <SqlQuery Name="AccountByIdSelectSqlQuery">
      <Text>
        SELECT
          account.title AS "Title",
          account.cash AS "AccountType"
        FROM
          template.account
        WHERE
          account.account_id = {AccountId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="AccountInsertSqlQuery">
      <Text>
		INSERT INTO template.account (
		  title,
		  cash
		)
		VALUES (
		  {Title},
		  {AccountType}
		)
		RETURNING account_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="AccountUpdateSqlQuery">
      <Text>
        UPDATE template.account
        SET
          title = {Title},
          cash = {AccountType}
        WHERE
          account_id = {AccountId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="AccountArchiveUpdateSqlQuery">
      <Text>
        UPDATE template.account
        SET
          archive = NOT archive
        WHERE
          account_id = {AccountId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="AccountDeleteSqlQuery">
      <Text>
        SELECT template.account_try_delete({AccountId}::smallint);
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Назначения платежей===-->
    <!--============================================================-->
    <SqlQuery Name="OperationSelectSqlQuery">
      <Text>  
	    SELECT
	      true AS "Expand",
	      -2::bigint AS "OperationId",
	      NULL::bigint AS "OperationCategoryId",
	      'ДОХОД' AS "Title",
	      false AS "System",
	      false AS "Archive"
	    
	    UNION ALL
	    
	    SELECT
	      true AS "Expand",
	      -1::bigint,
	      NULL::bigint,
	      'РАСХОД',
	      false,
	      false
	    
	    UNION ALL
	    
	    SELECT
	      true AS "Expand",
	      O.operation_id AS "OperationId",
	      COALESCE(O.operation_category_id, CASE WHEN income THEN -2 ELSE -1 END) AS "OperationCategoryId",
	      O.title AS "Title",
	      O.id_title NOTNULL AS "System",
	      O.archive AS "Archive"
	    FROM template.operation O;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationCategorySelectSqlQuery">
      <Text>
	    WITH RECURSIVE tree (operation_id, operation_category_id, title, id_title, income, path, archive) AS (
	      SELECT -2::bigint, NULL::bigint, 'ДОХОД', NULL, true, ARRAY[-2]::bigint[], false
	    
	      UNION
	    
	      SELECT -1::bigint, NULL::bigint, 'РАСХОД', NULL, false, ARRAY[-1]::bigint[], false
	    
	      UNION
	    
	      SELECT operation_id  AS operation_id, operation_category_id, title, id_title, income, ARRAY[CASE WHEN income THEN -2 ELSE -1 END, operation_id]::bigint[] AS path, archive
	      FROM _t
	    
	      UNION
	    
	      SELECT o2.operation_id  AS operation_id, o2.operation_category_id, o2.title, o2.id_title, o2.income, tree.path || ARRAY[o2.operation_id]::bigint[] AS path, o2.archive
	      FROM 
	        _t, _o o2
	        INNER JOIN tree ON tree.operation_id = o2.operation_category_id
	    ), _t AS (
	      SELECT  *
	      FROM _o
	      WHERE operation_category_id IS NULL 
	    ), _o AS(
	      SELECT  *
	      FROM template.operation o
	      WHERE operation_id IS DISTINCT FROM {OperationId} AND id_title IS NULL
	    )
	    SELECT
	      T.operation_id AS "OperationId",
	      CASE WHEN array_length(T.path, 1) > 1 THEN COALESCE(repeat('  ', (array_length(T.path, 1)-1)*2) || ' ', '') ELSE '' END || T.title AS "Title",
	      income AS "IsIncome"
	    FROM tree T
	    LEFT JOIN
	    (
	      WITH RECURSIVE current_tree (operation_id, operation_category_id) AS(
	        SELECT
	          operation_id,
	          operation_category_id
	        FROM
	          template.operation O
	        WHERE
	          {OperationCategoryId} IS NOT NULL AND operation_id = {OperationCategoryId}
	    
	        UNION
	    
	        SELECT
	          O.operation_id,
	          COALESCE(O.operation_category_id, CASE WHEN income THEN -2 ELSE -1 END)::bigint
	        FROM
	          template.operation O
	          JOIN current_tree T ON (O.operation_id = T.operation_category_id)
	      ), t AS (
	        SELECT * FROM current_tree
	    
	        UNION
	    
	        SELECT -2, NULL WHERE EXISTS (SELECT * FROM current_tree WHERE operation_category_id = -2)
	    
	        UNION
	    
	        SELECT -1, NULL  WHERE EXISTS (SELECT * FROM current_tree WHERE operation_category_id = -1)
	      ) SELECT * FROM t) T2 ON (T.operation_id = T2.operation_id)
	    WHERE
	      (NOT archive OR T2.operation_id IS NOT NULL)
	    ORDER BY T.path;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationCashSelectSqlQuery">
      <Text>
	    SELECT
	      operation_id AS "OperationId",
	      title AS "Title",
	      archive AS "Archive"
	    FROM template.operation O
	    WHERE
	      id_title IS NULL AND
	      NOT EXISTS (SELECT * FROM template.operation O2 WHERE O2.operation_category_id = O.operation_id)
	    ORDER BY title, operation_id ASC;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationIsUsedSelectSqlQuery">
      <Text>
        SELECT template.operation_is_used_in_view_of_child({OperationId}::bigint) AS "IsUsed";
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationIsLeafSelectSqlQuery">
      <Text>
        SELECT
          operation_id  AS "OperationId",
          title AS "Title",
          income AS "IsIncome",
          NOT EXISTS(SELECT * FROM template.operation WHERE operation_category_id = O.operation_id) AS "IsLeaf",
          EXISTS(SELECT * FROM template.cash C WHERE C.operation_id = O.operation_id) AS "IsUsed"
        FROM template.operation O
        WHERE operation_id = {OperationId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationByIdSelectSqlQuery">
      <Text>
        SELECT
          title AS "Title",
          COALESCE(operation_category_id, CASE WHEN income THEN -2 ELSE -1 END) AS "OperationCategoryId", 
          income AS "IsIncome",
          id_title IS NOT NULL AS "IsSystem"
        FROM
          template.operation
        WHERE
          operation.operation_id = {OperationId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationInsertSqlQuery">
      <Text>
		INSERT INTO template.operation (
		  title,
		  operation_category_id,
		  income
		)
		VALUES (
		  {Title},
		  {OperationCategoryId},
		  {IsIncome}
		)
		RETURNING operation_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationUpdateSqlQuery">
      <Text>
	    UPDATE template.operation
	    SET
	      title = CASE WHEN id_title IS NULL THEN {Title} ELSE title END,
	      operation_category_id = {OperationCategoryId},
	      income = {IsIncome}
	      WHERE operation_id = {OperationId};
	  
	    SELECT template.operation_update_child({OperationId}::bigint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationArchiveUpdateSqlQuery">
      <Text>
        SELECT template.operation_try_archive({OperationId}::bigint, {Archive}::boolean);
      </Text>
    </SqlQuery>

    <SqlQuery Name="OperationDeleteSqlQuery">
      <Text>
        SELECT template.operation_try_delete({OperationId});
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Пользователи===-->
    <!--============================================================-->
    <SqlQuery Name="UserLoginSelectSqlQuery">
      <Text>
		SELECT
		  user_id AS "UserId",
		  user_name AS "UserName",
		  user_full_name AS "UserFullName"
		FROM
		  template.user_info UI
		  JOIN template.user_group UG USING(user_id)
		  JOIN template.group G USING (group_id)
		WHERE
		  UI.person AND NOT UI.archive AND
		  G.name IS DISTINCT FROM 'GuestGroup';
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserCurrentSelectSqlQuery">
      <Text>
		SELECT
		  user_id AS "UserId",
		  user_name AS "UserName",
		  user_full_name AS "UserFullName"
		FROM
		  template.user_info
		WHERE
		  user_id = {UserId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserSelectSqlQuery">
      <Text>  
	    SELECT
	      user_id AS "UserId",
	      user_full_name AS "Title",
	      G.title AS "GroupTitle",
	      UI.archive AS "Archive"
	    FROM
	      template.user_info UI
	      JOIN template.user_group UG USING(user_id)
	      JOIN template.group G USING (group_id)
	    WHERE person
	    ORDER BY user_full_name, user_id;
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserByIdSelectSqlQuery">
      <Text>
		SELECT
		  user_name AS "UserName",
		  user_full_name AS "UserFullName",
		  group_id AS "GroupId",
		  user_id = {UserId} AS "IsCurrent"
		FROM
		  template.user_info
		  JOIN template.user_group USING(user_id)
		WHERE
		  user_id = {EditedUserId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserInsertSqlQuery">
      <Text>
	    INSERT INTO public.user(user_name, user_full_name, user_password)
	    VALUES({Name}, {FullName}, {Password});
	    
	    INSERT INTO template.user(public_user_id)
	    VALUES(CURRVAL('public.user_id_seq'))
	    RETURNING user_id;
	    
	    INSERT INTO template.user_group(user_id, group_id)
	    VALUES(CURRVAL('template.user_id_seq'), {GroupId});
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserUpdateSqlQuery">
      <Text>
	    UPDATE public.user
	    SET
	      user_name = {Name},
	      user_full_name = {FullName}
	    FROM
	      template.user U
	    WHERE
	      "user".user_id = U.public_user_id AND
	      U.user_id = {EditedUserId};
	    
	    UPDATE template.user_group
	    SET
	      group_id = {GroupId}
	    WHERE
	      user_id = {EditedUserId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserArchiveUpdateSqlQuery">
      <Text>
	    UPDATE public.user
	    SET
	      enabled = NOT {Archive}
	    FROM
	      template.user U
	    WHERE
	      "user".user_id = U.public_user_id AND
	      U.user_id = {EditedUserId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserDeleteSqlQuery">
      <Text>
        SELECT template.user_try_delete({EditedUserId}::smallint);
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserExistsSelectSqlQuery">
      <Text>
	    SELECT EXISTS (
	      SELECT user_name
	      FROM
	        public.user PU
	        JOIN template.user U ON U.public_user_id = PU.user_id
	      WHERE
	        user_name = {UserName} AND
	        (U.user_id != {EditedUserId} OR {EditedUserId} IS NULL)
	    ) AS "UserExists";
      </Text>
    </SqlQuery>

    <SqlQuery Name="UserPasswordUpdateSqlQuery">
      <Text>
	    UPDATE public.user
	    SET user_password = {Password}
	    FROM
	      template.user U
	    WHERE
	      "user".user_id = U.public_user_id AND
	      U.user_id = {EditedUserId};
      </Text>
    </SqlQuery>

    <!--============================================================-->
    <!--===Группы пользователей===-->
    <!--============================================================-->
    <SqlQuery Name="GroupSelectSqlQuery">
      <Text>
	    SELECT
	      group_id AS "GroupId",
	      title AS "Title",
	      description AS "Description",
	      archive AS "Archive",
	      name IS NOT NULL AS "System"
	    FROM
	      template.group
	    WHERE
	      name IS DISTINCT FROM 'GuestGroup'
	    ORDER BY title, group_id;
	  </Text>
    </SqlQuery>

    <SqlQuery Name="GroupByIdSelectSqlQuery">
      <Text>
	    SELECT
	      title AS "Title",
	      description AS "Description"
	    FROM template.group
	    WHERE group_id = {GroupId};
      </Text>
    </SqlQuery>

    <SqlQuery Name="PermissionBlockItemSelectSqlQuery">
      <Text>
	    WITH group_permission_block_item_tmp AS (
	      SELECT DISTINCT
	        PBI.permission_block_id,
	        PBI.permission_block_item_id
	      FROM
	        template.group_permission GP
	        JOIN template.permission P USING(permission_id)
	        JOIN template.permission_block_item PBI USING(permission_block_item_id)
	      WHERE group_id = {GroupId}
	    )
	    SELECT
	      ROW_NUMBER() OVER(ORDER BY permission_block_id) AS "PermissionBlockRowNumber",
	      0 AS "PermissionBlockItemRowNumber",
	      PB.permission_block_id AS "PermissionBlockId",
	      NULL::smallint AS "PermissionBlockItemId",
	      PB.title AS "Title",
	      COALESCE(array_compare(PBI.item_id_array, GPBI.item_id_array), False) AS "Checked"
	    FROM
	      template.permission_block PB
	      LEFT JOIN LATERAL (
	        SELECT
	          array_agg(permission_block_item_id) AS item_id_array
	        FROM
	          template.permission_block_item PBI
	        WHERE
	          PBI.permission_block_id = PB.permission_block_id
	      ) AS PBI ON true
	      LEFT JOIN LATERAL (
	        SELECT
	          array_agg(permission_block_item_id) AS item_id_array
	        FROM
	          group_permission_block_item_tmp GPBI
	        WHERE
	          GPBI.permission_block_id = PB.permission_block_id
	      ) AS GPBI ON true
	    WHERE
	      NOT PB.by_default
	  
	    UNION ALL
	    
	    SELECT
	      DENSE_RANK() OVER(ORDER BY PB.permission_block_id) AS "PermissionBlockRowNumber", 
	      ROW_NUMBER() OVER(PARTITION BY PB.permission_block_id ORDER BY PBI.permission_block_item_id) AS "PermissionBlockItemRowNumber",
	      PBI.permission_block_id,
	      PBI.permission_block_item_id,
	      '    ' || PBI.title,
	      GPBI.permission_block_item_id IS NOT NULL AS "Checked"
	    FROM
	      template.permission_block PB
	      JOIN template.permission_block_item PBI USING(permission_block_id)
	      LEFT JOIN group_permission_block_item_tmp GPBI USING(permission_block_item_id)
	    WHERE
	      NOT PB.by_default
	    ORDER BY "PermissionBlockRowNumber", "PermissionBlockItemRowNumber";
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupInsertSqlQuery">
      <Text>
	    INSERT INTO template.group (
	      title,
	      description
	    )
	    VALUES (
	      {Title},
	      {Description}
	    )
	    RETURNING group_id;
	    
	    -- Добавление разрешений
	    INSERT INTO template.group_permission(group_id, permission_id)
	    SELECT
	      currval('template.group_id_seq'::regclass),
	      permission_id
	    FROM
	      template.permission P
	      JOIN template.permission_block_item PBI USING(permission_block_item_id)
	      JOIN template.permission_block PB USING(permission_block_id)
	    WHERE
	      PB.by_default OR
	      P.permission_block_item_id = ANY ({PermissionBlockItemId}::smallint[])
	    ON CONFLICT (group_id, permission_id) DO NOTHING;
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupUpdateSqlQuery">
      <Text>
	    UPDATE template.group
	    SET
	      title = {Title},
	      description = {Description}
	    WHERE
	      group_id = {GroupId};
	
	    -- Добавление разрешений
	    INSERT INTO template.group_permission(group_id, permission_id)
	    SELECT
	      {GroupId},
	      permission_id
	    FROM
	      template.permission P
	    WHERE
	      P.permission_block_item_id = ANY ({PermissionBlockItemId}::smallint[])
	    ON CONFLICT (group_id, permission_id) DO NOTHING;
	    
	    -- Удаление разрешений
	    DELETE FROM template.group_permission GP
	      USING template.permission P
	      JOIN template.permission_block_item PBI USING(permission_block_item_id)
	      JOIN template.permission_block PB USING(permission_block_id)
	    WHERE
	      GP.permission_id = P.permission_id AND
	      group_id = {GroupId} AND
	      NOT PB.by_default AND
	      P.permission_block_item_id != ALL ({PermissionBlockItemId}::smallint[]);
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupArchiveUpdateSqlQuery">
      <Text>
        SELECT template.group_try_archive({GroupId}::smallint, {Archive});
      </Text>
    </SqlQuery>

    <SqlQuery Name="GroupDeleteSqlQuery">
      <Text>
        SELECT template.group_try_delete({GroupId}::smallint);
      </Text>
    </SqlQuery>
  </SqlQueries>

  <AccessPoints>
    <!-- Сменить пароль -->
    <AccessPoint Name="UserCurrentPasswordEditAccessPoint" />

    <!-- Города -->
    <AccessPoint Name="CityViewAccessPoint" />
    <AccessPoint Name="CityAddAccessPoint" />
    <AccessPoint Name="CityEditAccessPoint" />
    <AccessPoint Name="CityDeleteAccessPoint" />
    <AccessPoint Name="CityArchiveAccessPoint" />

    <!-- Клиенты -->
    <AccessPoint Name="ClientViewAccessPoint" />
    <AccessPoint Name="ClientAddAccessPoint" />
    <AccessPoint Name="ClientEditAccessPoint" />
    <AccessPoint Name="ClientDeleteAccessPoint" />
    <AccessPoint Name="ClientArchiveAccessPoint" />

    <!-- Счета -->
    <AccessPoint Name="AccountViewAccessPoint" />
    <AccessPoint Name="AccountAddAccessPoint" />
    <AccessPoint Name="AccountEditAccessPoint" />
    <AccessPoint Name="AccountDeleteAccessPoint" />
    <AccessPoint Name="AccountArchiveAccessPoint" />

    <!-- Назначения платежей -->
    <AccessPoint Name="OperationViewAccessPoint" />
    <AccessPoint Name="OperationAddAccessPoint" />
    <AccessPoint Name="OperationEditAccessPoint" />
    <AccessPoint Name="OperationDeleteAccessPoint" />
    <AccessPoint Name="OperationArchiveAccessPoint" />

    <!-- Единицы измерения -->
    <AccessPoint Name="UnitViewAccessPoint" />
    <AccessPoint Name="UnitAddAccessPoint" />
    <AccessPoint Name="UnitEditAccessPoint" />
    <AccessPoint Name="UnitDeleteAccessPoint" />
    <AccessPoint Name="UnitArchiveAccessPoint" />

    <!-- ТМЦ -->
    <AccessPoint Name="MaterialCategoryAddAccessPoint" />
    <AccessPoint Name="MaterialCategoryEditAccessPoint" />
    <AccessPoint Name="MaterialCategoryDeleteAccessPoint" />
    <AccessPoint Name="MaterialCategoryArchiveAccessPoint" />
    <AccessPoint Name="MaterialViewAccessPoint" />
    <AccessPoint Name="MaterialAddAccessPoint" />
    <AccessPoint Name="MaterialEditAccessPoint" />
    <AccessPoint Name="MaterialDeleteAccessPoint" />
    <AccessPoint Name="MaterialArchiveAccessPoint" />

    <!-- Касса -->
    <AccessPoint Name="CashViewAccessPoint" />
    <AccessPoint Name="CashAddAccessPoint" />
    <AccessPoint Name="CashEditAccessPoint" />
    <AccessPoint Name="CashDeleteAccessPoint" />
    <AccessPoint Name="CashExportToExcelAccessPoint" />

    <!-- Заказы -->
    <AccessPoint Name="OrderViewAccessPoint" />
    <AccessPoint Name="OrderAddAccessPoint" />
    <AccessPoint Name="OrderEditAccessPoint" />
    <AccessPoint Name="OrderDeleteAccessPoint" />

    <!-- Отчеты -->
    <AccessPoint Name="DeletedOrderReportViewAccessPoint" />
    <AccessPoint Name="BudgetReportViewAccessPoint" />

    <!-- Пользователи -->
    <AccessPoint Name="UserViewAccessPoint" />
    <AccessPoint Name="UserAddAccessPoint" />
    <AccessPoint Name="UserEditAccessPoint" />
    <AccessPoint Name="UserArchiveAccessPoint" />
    <AccessPoint Name="UserDeleteAccessPoint" />
    <AccessPoint Name="UserPasswordEditAccessPoint" />

    <!-- Группы пользователей -->
    <AccessPoint Name="GroupViewAccessPoint" />
    <AccessPoint Name="GroupAddAccessPoint" />
    <AccessPoint Name="GroupEditAccessPoint" />
    <AccessPoint Name="GroupArchiveAccessPoint" />
    <AccessPoint Name="GroupDeleteAccessPoint" />

    <!-- Настройки -->
    <AccessPoint Name="SettingsViewAccessPoint" />
    <AccessPoint Name="SettingsEditAccessPoint" />
  </AccessPoints>

  <Permissions>
    <!-- Базовые права -->
    <Permission Name="BaseViewPermission">
      <SqlQuery Name="UserLoginSelectSqlQuery" />
      <SqlQuery Name="UserCurrentSelectSqlQuery" />
      <SqlQuery Name="SettingsSelectSqlQuery" />
    </Permission>

    <!-- Города -->
    <Permission Name="CityViewPermission">
      <AccessPoint Name="CityViewAccessPoint" />
      <SqlQuery Name="CitySelectSqlQuery" />
      <SqlQuery Name="CityShortSelectSqlQuery" />
    </Permission>

    <Permission Name="CityEditPermission">
      <AccessPoint Name="CityAddAccessPoint" />
      <AccessPoint Name="CityEditAccessPoint" />
      <AccessPoint Name="CityDeleteAccessPoint" />
      <AccessPoint Name="CityArchiveAccessPoint" />
      <SqlQuery Name="CityInsertSqlQuery" />
      <SqlQuery Name="CityUpdateSqlQuery" />
      <SqlQuery Name="CityDeleteSqlQuery" />
    </Permission>

    <!-- Клиенты -->
    <Permission Name="ClientViewPermission">
      <AccessPoint Name="ClientViewAccessPoint" />
      <SqlQuery Name="ClientSelectSqlQuery" />
      <SqlQuery Name="ClientByIdSelectSqlQuery" />
      <!-- Дополнительно -->
      <SqlQuery Name="CityShortSelectSqlQuery" />
    </Permission>

    <Permission Name="ClientEditPermission">
      <AccessPoint Name="ClientAddAccessPoint" />
      <AccessPoint Name="ClientEditAccessPoint" />
      <AccessPoint Name="ClientDeleteAccessPoint" />
      <AccessPoint Name="ClientArchiveAccessPoint" />
      <SqlQuery Name="ClientInsertSqlQuery" />
      <SqlQuery Name="ClientUpdateSqlQuery" />
      <SqlQuery Name="ClientDeleteSqlQuery" />
      <SqlQuery Name="ClientArchiveSqlQuery" />
    </Permission>

    <!-- Счета -->
    <Permission Name="AccountViewPermission">
      <AccessPoint Name="AccountViewAccessPoint" />
      <SqlQuery Name="AccountSelectSqlQuery" />
      <SqlQuery Name="AccountByIdSelectSqlQuery" />
    </Permission>

    <Permission Name="AccountEditPermission">
      <AccessPoint Name="AccountAddAccessPoint" />
      <AccessPoint Name="AccountEditAccessPoint" />
      <AccessPoint Name="AccountDeleteAccessPoint" />
      <AccessPoint Name="AccountArchiveAccessPoint" />
      <SqlQuery Name="AccountInsertSqlQuery" />
      <SqlQuery Name="AccountUpdateSqlQuery" />
      <SqlQuery Name="AccountArchiveUpdateSqlQuery" />
      <SqlQuery Name="AccountDeleteSqlQuery" />
    </Permission>

    <!-- Назначения платежей -->
    <Permission Name="OperationViewPermission">
      <AccessPoint Name="OperationViewAccessPoint" />
      <SqlQuery Name="OperationSelectSqlQuery" />
      <SqlQuery Name="OperationCategorySelectSqlQuery" />
      <SqlQuery Name="OperationByIdSelectSqlQuery" />
      <SqlQuery Name="OperationCashSelectSqlQuery" />
    </Permission>

    <Permission Name="OperationEditPermission">
      <AccessPoint Name="OperationAddAccessPoint" />
      <AccessPoint Name="OperationEditAccessPoint" />
      <AccessPoint Name="OperationDeleteAccessPoint" />
      <AccessPoint Name="OperationArchiveAccessPoint" />
      <SqlQuery Name="OperationInsertSqlQuery" />
      <SqlQuery Name="OperationUpdateSqlQuery" />
      <SqlQuery Name="OperationArchiveUpdateSqlQuery" />
      <SqlQuery Name="OperationDeleteSqlQuery" />
      <SqlQuery Name="OperationIsUsedSelectSqlQuery" />
      <SqlQuery Name="OperationIsLeafSelectSqlQuery" />
    </Permission>

    <!-- Единицы измерения -->
    <Permission Name="UnitViewPermission">
      <AccessPoint Name="UnitViewAccessPoint" />
      <SqlQuery Name="UnitSelectSqlQuery" />
      <SqlQuery Name="UnitByIdSelectSqlQuery" />
    </Permission>

    <Permission Name="UnitEditPermission">
      <AccessPoint Name="UnitAddAccessPoint" />
      <AccessPoint Name="UnitEditAccessPoint" />
      <AccessPoint Name="UnitDeleteAccessPoint" />
      <AccessPoint Name="UnitArchiveAccessPoint" />
      <SqlQuery Name="UnitInsertSqlQuery" />
      <SqlQuery Name="UnitUpdateSqlQuery" />
      <SqlQuery Name="UnitArchiveUpdateSqlQuery" />
      <SqlQuery Name="UnitDeleteSqlQuery" />
    </Permission>

    <!-- ТМЦ -->
    <Permission Name="MaterialCategoryViewPermission">
      <SqlQuery Name="MaterialCategoryListSelectSqlQuery" />
      <SqlQuery Name="MaterialCategoryRelationSelectSqlQuery" />
      <SqlQuery Name="MaterialCategoryByIdSelectSqlQuery" />
      <SqlQuery Name="ParentMaterialCategorySelectSqlQuery" />
    </Permission>

    <Permission Name="MaterialCategoryEditPermission">
      <AccessPoint Name="MaterialCategoryAddAccessPoint" />
      <AccessPoint Name="MaterialCategoryEditAccessPoint" />
      <AccessPoint Name="MaterialCategoryDeleteAccessPoint" />
      <AccessPoint Name="MaterialCategoryArchiveAccessPoint" />
      <SqlQuery Name="MaterialCategoryInsertSqlQuery" />
      <SqlQuery Name="MaterialCategoryUpdateSqlQuery" />
      <SqlQuery Name="MaterialCategoryDeleteSqlQuery" />
      <SqlQuery Name="MaterialCategoryDeleteCascadeSqlQuery" />
      <SqlQuery Name="MaterialCategoryArchiveSqlQuery" />
    </Permission>

    <Permission Name="MaterialViewPermission">
      <AccessPoint Name="MaterialViewAccessPoint" />
      <SqlQuery Name="MaterialSelectSqlQuery" />
      <SqlQuery Name="MaterialByIdSelectSqlQuery" />
      <!-- Дополнительно -->
      <SqlQuery Name="UnitSelectSqlQuery" />
    </Permission>

    <Permission Name="MaterialEditPermission">
      <AccessPoint Name="MaterialAddAccessPoint" />
      <AccessPoint Name="MaterialEditAccessPoint" />
      <AccessPoint Name="MaterialArchiveAccessPoint" />
      <AccessPoint Name="MaterialDeleteAccessPoint" />
      <SqlQuery Name="MaterialInsertSqlQuery" />
      <SqlQuery Name="MaterialUpdateSqlQuery" />
      <SqlQuery Name="MaterialArchiveSqlQuery" />
      <SqlQuery Name="MaterialDeleteSqlQuery" />
    </Permission>

    <!-- Заказы -->
    <Permission Name="OrderViewPermission">
      <AccessPoint Name="OrderViewAccessPoint" />
      <SqlQuery Name="OrderSelectSqlQuery" />
      <SqlQuery Name="OrderByIdSelectSqlQuery" />

      <SqlQuery Name="OrderPositionByOrderIdSelectSqlQuery" />
      <SqlQuery Name="OrderPositionByIdSelectSqlQuery" />
      <SqlQuery Name="OrderPaymentByOrderIdSelectSqlQuery" />
      <SqlQuery Name="OrderPaymentByIdSelectSqlQuery" />
      <!-- Дополнительно -->
      <SqlQuery Name="AccountSelectSqlQuery" />
      <SqlQuery Name="CitySimpleSelectSqlQuery" />
      <SqlQuery Name="ClientShortSelectSqlQuery" />
      <SqlQuery Name="ClientSimpleSelectSqlQuery" />
      <SqlQuery Name="MaterialShortSelectSqlQuery" />
      <SqlQuery Name="MaterialSimpleSelectSqlQuery" />
    </Permission>

    <Permission Name="OrderEditPermission">
      <AccessPoint Name="OrderAddAccessPoint" />
      <AccessPoint Name="OrderEditAccessPoint" />
      <AccessPoint Name="OrderDeleteAccessPoint" />
      <SqlQuery Name="EmptyOrderInsertSqlQuery" />
      <SqlQuery Name="EmptyOrderDeleteSqlQuery" />
      <SqlQuery Name="OrderUpdateSqlQuery" />
      <SqlQuery Name="OrderDeleteSqlQuery" />
      <!-- Дополнительно -->
      <SqlQuery Name="OrderPositionInsertSqlQuery" />
      <SqlQuery Name="OrderPositionUpdateSqlQuery" />
      <SqlQuery Name="OrderPositionDeleteSqlQuery" />
      <SqlQuery Name="OrderPaymentInsertSqlQuery" />
      <SqlQuery Name="OrderPaymentUpdateSqlQuery" />
      <SqlQuery Name="OrderPaymentDeleteSqlQuery" />
    </Permission>

    <!-- Касса -->
    <Permission Name="CashViewPermission">
      <AccessPoint Name="CashViewAccessPoint" />
      <AccessPoint Name="CashExportToExcelAccessPoint" />
      <SqlQuery Name="CashSelectSqlQuery" />
      <SqlQuery Name="CashByIdSelectSqlQuery" />
      <!-- Дополнительно -->
      <SqlQuery Name="AccountSelectSqlQuery" />
      <SqlQuery Name="OperationCashSelectSqlQuery" />
    </Permission>

    <Permission Name="CashEditPermission">
      <AccessPoint Name="CashAddAccessPoint" />
      <AccessPoint Name="CashEditAccessPoint" />
      <AccessPoint Name="CashDeleteAccessPoint" />
      <SqlQuery Name="CashInsertSqlQuery" />
      <SqlQuery Name="CashUpdateSqlQuery" />
      <SqlQuery Name="CashDeleteSqlQuery" />
    </Permission>

    <!-- Отчеты -->
    <Permission Name="DeletedOrderReportPermission">
      <AccessPoint Name="DeletedOrderReportViewAccessPoint" />
      <SqlQuery Name="DeletedOrderSelectSqlQuery" />
    </Permission>

    <Permission Name="BudgetReportPermission">
      <AccessPoint Name="BudgetReportViewAccessPoint" />
      <SqlQuery Name="BudgetReportSelectSqlQuery" />
      <SqlQuery Name="BudgetReportDetailSelectSqlQuery" />
    </Permission>

    <!-- Настройки -->
    <Permission Name="SettingsViewPermission">
      <AccessPoint Name="SettingsViewAccessPoint" />
      <SqlQuery Name="SettingsSelectSqlQuery" />
      <SqlQuery Name="LoadModeSelectSqlQuery" />
    </Permission>

    <Permission Name="SettingsEditPermission">
      <AccessPoint Name="SettingsEditAccessPoint" />
      <SqlQuery Name="SettingsUpdateSqlQuery" />
    </Permission>

    <!-- Пользователи -->
    <Permission Name="UserViewPermission">
      <AccessPoint Name="UserViewAccessPoint" />
      <SqlQuery Name="UserSelectSqlQuery" />
      <SqlQuery Name="UserByIdSelectSqlQuery" />
      <SqlQuery Name="GroupSelectSqlQuery" />
      <SqlQuery Name="UserExistsSelectSqlQuery" />
    </Permission>

    <Permission Name="UserEditPermission">
      <AccessPoint Name="UserAddAccessPoint" />
      <AccessPoint Name="UserEditAccessPoint" />
      <AccessPoint Name="UserArchiveAccessPoint" />
      <AccessPoint Name="UserDeleteAccessPoint" />
      <AccessPoint Name="UserPasswordEditAccessPoint" />
      <SqlQuery Name="UserInsertSqlQuery" />
      <SqlQuery Name="UserUpdateSqlQuery" />
      <SqlQuery Name="UserArchiveUpdateSqlQuery" />
      <SqlQuery Name="UserDeleteSqlQuery" />
    </Permission>

    <!-- Группы пользователей -->
    <Permission Name="GroupViewPermission">
      <AccessPoint Name="GroupViewAccessPoint" />
      <SqlQuery Name="GroupSelectSqlQuery" />
      <SqlQuery Name="GroupByIdSelectSqlQuery" />
      <SqlQuery Name="PermissionBlockItemSelectSqlQuery" />
    </Permission>

    <Permission Name="GroupEditPermission">
      <AccessPoint Name="GroupAddAccessPoint" />
      <AccessPoint Name="GroupEditAccessPoint" />
      <AccessPoint Name="GroupArchiveAccessPoint" />
      <AccessPoint Name="GroupDeleteAccessPoint" />
      <SqlQuery Name="GroupInsertSqlQuery" />
      <SqlQuery Name="GroupUpdateSqlQuery" />
      <SqlQuery Name="GroupArchiveUpdateSqlQuery" />
      <SqlQuery Name="GroupDeleteSqlQuery" />
    </Permission>

    <!-- Доступы по умолчанию -->
    <Permission Name="UserPasswordEditPermission">
      <AccessPoint Name="UserCurrentPasswordEditAccessPoint" />
      <SqlQuery Name="UserByIdSelectSqlQuery" />
      <SqlQuery Name="UserPasswordUpdateSqlQuery" />
    </Permission>
  </Permissions>

  <Roles />

  <Groups />
</Workflow>